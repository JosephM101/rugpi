//! Image configuration.

import foreign::NumBytes
import projects::Architecture

/// Image configuration.
record ImageConfig {
    /// Layer the image is based on.
    layer: string,
    /// Architecture of the image.
    architecture: Architecture,
    /// Rugix Bakery target.
    target?: Target,
    /// Size of the image.
    size?: NumBytes,
    /// Layout of the image.
    layout?: ImageLayout,
}

/// Layout of an image.
record ImageLayout {
    /// Type of the partition table.
    #[json(name = "type")]
    ty?: PartitionTableType,
    /// Image partitions.
    partitions?: [ImagePartition],
}

/// Partition table type.
#[json(tagged=externally, rename_all = "lowercase")]
variant PartitionTableType {
    /// MBR partition.
    Mbr,
    /// GPT partition.
    Gpt,
}

/// Partition of an image.
record ImagePartition {
    /// Size of the partition.
    size?: NumBytes,
    /// Filesystem of the partition.
    filesystem?: Filesystem,
    /// Root directory to copy into the filesystem.
    root?: string,
    /// Type of the partition (GUID or MBR hex value).
    #[json(name = "type")]
    ty?: PartitionType,
}

/// Filesystem.
#[json(tagged=externally, rename_all = "lowercase")]
variant Filesystem {
    /// EXT4 filesystem.
    Ext4,
    /// Fat32 filesystem.
    Fat32,
}

/// Target.
#[json(tagged=externally, rename_all = "kebab-case")]
variant Target {
    /// Generic target for EFI-compatible systems.
    GenericGrubEfi,
    /// Raspberry Pi-specific target using the `tryboot` mechanism.
    RpiTryboot,
    /// Raspberry Pi-specific target using U-Boot.
    RpiUboot,
    /// Target for unsupported devices.
    Unknown,
}

/// Partition type.
#[rust(type = "::rugpi_common::disk::PartitionType")]
#[json(type = "string")]
opaque PartitionType