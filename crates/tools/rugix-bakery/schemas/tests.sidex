//! Test configuration.

import foreign::NumBytes

/// Test configuration.
record TestConfig {
    /// Systems to run the test on.
    systems: [SystemConfig],
    /// Steps of the test.
    steps: [TestStep],
}

/// System configuration for testing.
#[json(rename_all = "kebab-case")]
record SystemConfig {
    /// Image to use.
    system: string,
    /// Size of the disk.
    disk_size?: NumBytes,
    /// SSH configuration.
    ssh?: SshConfig,
}

/// SSH configuration.
#[json(rename_all = "kebab-case")]
record SshConfig {
    /// Path to the private key.
    private_key: string,
}

/// Test step.
#[json(tag = "action", rename_all = "kebab-case")]
variant TestStep {
    /// Run a script on the SUT.
    Run: RunStep,
    /// Wait for a given amount of time.
    Wait: WaitStep,
}

/// Run step.
#[json(rename_all = "kebab-case")]
record RunStep {
    /// Description of the step.
    description?: string,
    /// Script to run.
    script: string,
    /// File to provide on the standard input to the script.
    stdin_file?: string,
    /// Do no treat SSH disconnects as failures.
    may_disconnect?: bool,
    /// Do not treat non-zero exit code as failures.
    may_fail?: bool,
}

/// Wait step.
#[json(rename_all = "kebab-case")]
record WaitStep {
    /// Description of the step.
    description?: string,
    /// Time to wait in seconds.
    duration: f64,
}