name: Build Rugpi Bakery

on:
  schedule:
    # This creates the nightly version of Rugpi Bakery.
    - cron: '0 0 * * *'
  push:
    branches:
      - '*'
    tags:
      - 'v*'
  pull_request:
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: "ghcr.io/silitics/rugpi-bakery"

jobs:
  metadata:
    name: Docker Image Metedata
    runs-on: ubuntu-latest
    outputs:
      labels: ${{ steps.meta.outputs.labels }}
      json: ${{ steps.meta.outputs.json }}
      version: ${{ steps.meta.outputs.version }}
    steps:
      - name: Docker Meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          # Include this once we released version 1.0.0.
          # type=semver,pattern=v{{major}}
          tags: |
            type=schedule,pattern=nightly
            type=schedule,pattern=nightly-{{date 'YYYYMMDD'}}
            type=semver,pattern=v{{major}}.{{minor}}.{{patch}}
            type=semver,pattern=v{{major}}.{{minor}}
            type=ref,event=branch
            type=ref,event=pr
          labels: |
            org.opencontainers.image.title=Rugpi Bakery
            org.opencontainers.image.vendor=Silitics GmbH
  
  build-platform-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [metadata]
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          lfs: true
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and Push Image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/Dockerfile.rugpi-bakery
          platforms: ${{ matrix.platform }}
          labels: ${{ needs.metadata.outputs.labels }}
          push: true
          tags: ${{ env.IMAGE_NAME }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=image,name=${{ env.IMAGE_NAME }},push-by-digest=true,name-canonical=true,push=true
          build-args: |
            BUILDTIME=${{ fromJSON(needs.metadata.outputs.json).labels['org.opencontainers.image.created'] }}
            VERSION=${{ fromJSON(needs.metadata.outputs.json).labels['org.opencontainers.image.version'] }}
            REVISION=${{ fromJSON(needs.metadata.outputs.json).labels['org.opencontainers.image.revision'] }}
      
      - name: Export Digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"

      - name: Upload Digest
        uses: actions/upload-artifact@v3
        with:
          name: digests
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1
  
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs:
      - metadata
      - build-platform-images
    steps:
      - name: Download Digests
        uses: actions/download-artifact@v3
        with:
          name: digests
          path: /tmp/digests

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Manifest List and Push
        working-directory: /tmp/digests
        env:
          # We use an environment variable here because the shell knows how to properly escape JSON.
          METADATA_JSON: ${{ needs.metadata.outputs.json }}
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$METADATA_JSON") \
            $(printf '${{ env.IMAGE_NAME }}@sha256:%s ' *)
      
      - name: Inspect Image
        run: |
          docker buildx imagetools inspect ${{ env.IMAGE_NAME }}:${{ needs.metadata.outputs.version }}
